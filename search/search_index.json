{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Data Structures \u521d\u7ea7 \u5173\u4e8e\u6b64\u8bfe\u7a0b This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook \u201cPython for Everybody\u201d. This course covers Python 3. \u7b2c 6 \u7ae0: \u5b57\u7b26\u4e32 \u7b2c 7 \u7ae0: \u6587\u4ef6 \u7b2c 8 \u7ae0: \u5217\u8868 \u7b2c 9 \u7ae0: \u5b57\u5178 \u7b2c 10 \u7ae0: \u5143\u7ec4","title":"Home"},{"location":"#python-data-structures","text":"\u521d\u7ea7","title":"Python Data Structures"},{"location":"#_1","text":"This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook \u201cPython for Everybody\u201d. This course covers Python 3.","title":"\u5173\u4e8e\u6b64\u8bfe\u7a0b"},{"location":"#6","text":"","title":"\u7b2c 6 \u7ae0: \u5b57\u7b26\u4e32"},{"location":"#7","text":"","title":"\u7b2c 7 \u7ae0: \u6587\u4ef6"},{"location":"#8","text":"","title":"\u7b2c 8 \u7ae0: \u5217\u8868"},{"location":"#9","text":"","title":"\u7b2c 9 \u7ae0: \u5b57\u5178"},{"location":"#10","text":"","title":"\u7b2c 10 \u7ae0: \u5143\u7ec4"},{"location":"02-Structure/","text":"Python \u6570\u636e\u7ed3\u6784 \u521d\u7ea7 \u5173\u4e8e\u6b64\u8bfe\u7a0b This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook \u201cPython for Everybody\u201d. This course covers Python 3. \u7b2c 6 \u7ae0: \u5b57\u7b26\u4e32 \u7b2c 7 \u7ae0: \u6587\u4ef6 \u7b2c 8 \u7ae0: \u5217\u8868 \u7b2c 9 \u7ae0: \u5b57\u5178 \u7b2c 10 \u7ae0: \u5143\u7ec4","title":"\u8bfe\u7a0b\u8bf4\u660e"},{"location":"02-Structure/#python","text":"\u521d\u7ea7","title":"Python \u6570\u636e\u7ed3\u6784"},{"location":"02-Structure/#_1","text":"This course will introduce the core data structures of the Python programming language. We will move past the basics of procedural programming and explore how we can use the Python built-in data structures such as lists, dictionaries, and tuples to perform increasingly complex data analysis. This course will cover Chapters 6-10 of the textbook \u201cPython for Everybody\u201d. This course covers Python 3.","title":"\u5173\u4e8e\u6b64\u8bfe\u7a0b"},{"location":"02-Structure/#6","text":"","title":"\u7b2c 6 \u7ae0: \u5b57\u7b26\u4e32"},{"location":"02-Structure/#7","text":"","title":"\u7b2c 7 \u7ae0: \u6587\u4ef6"},{"location":"02-Structure/#8","text":"","title":"\u7b2c 8 \u7ae0: \u5217\u8868"},{"location":"02-Structure/#9","text":"","title":"\u7b2c 9 \u7ae0: \u5b57\u5178"},{"location":"02-Structure/#10","text":"","title":"\u7b2c 10 \u7ae0: \u5143\u7ec4"},{"location":"02-Structure/Chapter-10-Tuples/","text":"\u521b\u5efa \u5217\u8868\u7528\u4e8e\u5b58\u50a8\u548c\u4fee\u6539\u6570\u636e\uff0c\u5e76\u901a\u8fc7 ( ) \u6765\u521b\u5efa\u3002 >>> T = ('Glenn', 'Sally', 'Joseph') >>> T[2] 'Joseph' \u4e0e string \u7c7b\u578b\u76f8\u4f3c\uff0c\u4f60\u65e0\u6cd5\u4fee\u6539\u5176\u5185\u90e8\u6570\u636e >>> T[2] = 'Jim' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment \u4f18\u70b9\uff1a * \b\b\u5185\u5b58\u4f7f\u7528\u66f4\u5c11 * \u6267\u884c\u6548\u7387\u66f4\u9ad8 \u4e34\u65f6\u53d8\u91cf\u901a\u5e38\u4f7f\u7528 tuple \u6392\u5e8f \u6392\u5e8f\u4f7f\u7528 sorted \u51fd\u6570 sorted(iterable, /, *, key=None, reverse=False) Example: >>> c = {'a':10, 'b':1, 'c':22} >>> tmp = list() >>> for k, v in c.items() : ... tmp.append( (v, k) ) ... >>> print(tmp) [(10, 'a'), (22, 'c'), (1, 'b')] >>> tmp = sorted(tmp, reverse=True) >>> print(tmp) [(22, 'c'), (10, 'a'), (1, 'b')] \u53ef\u7528\u6765\u7b5b\u9009\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u524d\u51e0\u4e2a\u7c7b\u3002","title":"\u7b2c\u5341\u7ae0\uff1a\u5143\u7ec4"},{"location":"02-Structure/Chapter-10-Tuples/#_1","text":"\u5217\u8868\u7528\u4e8e\u5b58\u50a8\u548c\u4fee\u6539\u6570\u636e\uff0c\u5e76\u901a\u8fc7 ( ) \u6765\u521b\u5efa\u3002 >>> T = ('Glenn', 'Sally', 'Joseph') >>> T[2] 'Joseph' \u4e0e string \u7c7b\u578b\u76f8\u4f3c\uff0c\u4f60\u65e0\u6cd5\u4fee\u6539\u5176\u5185\u90e8\u6570\u636e >>> T[2] = 'Jim' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment \u4f18\u70b9\uff1a * \b\b\u5185\u5b58\u4f7f\u7528\u66f4\u5c11 * \u6267\u884c\u6548\u7387\u66f4\u9ad8 \u4e34\u65f6\u53d8\u91cf\u901a\u5e38\u4f7f\u7528 tuple","title":"\u521b\u5efa"},{"location":"02-Structure/Chapter-10-Tuples/#_2","text":"\u6392\u5e8f\u4f7f\u7528 sorted \u51fd\u6570 sorted(iterable, /, *, key=None, reverse=False) Example: >>> c = {'a':10, 'b':1, 'c':22} >>> tmp = list() >>> for k, v in c.items() : ... tmp.append( (v, k) ) ... >>> print(tmp) [(10, 'a'), (22, 'c'), (1, 'b')] >>> tmp = sorted(tmp, reverse=True) >>> print(tmp) [(22, 'c'), (10, 'a'), (1, 'b')] \u53ef\u7528\u6765\u7b5b\u9009\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u524d\u51e0\u4e2a\u7c7b\u3002","title":"\u6392\u5e8f"},{"location":"02-Structure/Chapter-6-Strings/","text":"\u521b\u5efa string \u53ef\u7531\u5355\u53cc\u5f15\u53f7\u521b\u5efa\uff0c '' \u6216 \"\" \u3002 str1 = 'Hello' str2 = \"World\" \u5b57\u7b26\u4e32\u8fde\u63a5 \u4f7f\u7528 + \u6765\b\u8fde\u63a52\u4e2a\u5b57\u7b26\u4e32\u3002 >>> str1 = 'Hello' >>> str2 = \"World\" >>> str1+str2 'HelloWorld' \u5b57\u7b26\u4e32\u8f6c\u6362 \u901a\u8fc7 int() \u5c06 string \u8f6c\u6362\u4e3a int \u7c7b\u3002 >>> str3 = '123' >>> type(str3) <class 'str'> >>> num = int(str3) >>> type(num) <class 'int'> Tip int() \u5e38\u4e8e input() \u8fde\u7528\u3002 >>> num = int(input('number = ')) number = 123 >>> type(num) <class 'int'> Example output = input + 1 output = input + 1 >>> x = input(\"number = \") + 1 number = 123 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can only concatenate str (not \"int\") to str >>> x = input(\"number = \") number = 123 >>> x = int(x) + 1 >>> x 124 \u5b57\u7b26\u4e32\u9009\u62e9 \u9009\u62e9 \u901a\u8fc7\u7d22\u5f15 index \u548c\u65b9\u62ec\u53f7 [ ] \u6765\u67e5\u770b\u5b57\u7b26\u4e32\u5185\u90e8\u6570\u636e\u3002 Warning \u5982\u679c\u7d22\u5f15 index \u8d85\u51fa\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 >>> fruit = 'banana' >>> fruit[10] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> IndexError: string index out of range \u5207\u7247 >>> s = 'Monty Python' >>> print(s[0:4]) Mont \u5207\u7247\u4f4d\u7f6e\u5230\u7b2c\u4e8c\u4e2a\u6570\u4e4b\u524d\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e8c\u4e2a\u6570\u3002 >>> print(s[6:7]) P \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u8303\u56f4\uff0c\u5207\u7247\u4f1a\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u7ed3\u675f\u3002 >>> print(s[6:20]) Python \u5de6\u3001\u53f3\u7f3a\u7701\u5c06\u88ab\u5206\u522b\u89c6\u4f5c\u4ece\u5934\u5f00\u59cb\u548c\u5230\u672b\u5c3e\u7ed3\u675f\u3002 >>> s = 'Monty Python' >>> print(s[:2]) Mo >>> print(s[8:]) thon >>> print(s[:]) Monty Python \u5b57\u7b26\u4e32\u957f\u5ea6 \u5185\u5efa\u51fd\u6570 len() \u53ef\u7528\u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u3002 >>> fruit = 'banana' >>> print(len(fruit)) 6 \u903b\u8f91\u5224\u65ad >>> fruit = 'banana' >>> 'n' in fruit True >>> 'm' in fruit False >>> 'nan' in fruit True >>> if 'a' in fruit : ... print('Found it!') ... Found it! \u6bd4\u8f83 if word == 'banana': print('All right, bananas.') if word < 'banana': print('Your word,' + word + ', comes before banana.') elif word > 'banana': print('Your word,' + word + ', comes after banana.') else: print('All right, bananas.') \u5b57\u7b26\u67e5\u627e \u6211\u4eec\u901a\u8fc7 find() \b\u6765\u5bfb\u627e\u5b57\u7b26\u4e32\u4e2d\u7684\u5b50\u5b57\u7b26\u4e32\u3002 find() \u5bfb\u627e\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 >>> fruit = 'banana' >>> pos = fruit.find('na') >>> print(pos) 2 \u5982\u679c\u5b50\u5b57\u7b26\u4e32\u672a\u88ab\u627e\u5230\uff0c\u5219 find() \u8fd4\u56de -1 \u3002 >>> aa = fruit.find('z') >>> print(aa) -1 \u62b9\u6389\u7a7a\u683c strip() \u540c\u65f6\u62b9\u6389\u5f00\u5934\u548c\b\u7ed3\u5c3e\u7684\u7a7a\u683c\uff08\u5b50\u5b57\u7b26\u4e32\uff09\u3002 >>> greet = ' Hello Bob ' >>> greet.strip() 'Hello Bob' lstrip() \u548c rstrip() \u5206\u522b\u62b9\u6389\b\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u683c\uff08\u5b50\u5b57\u7b26\u4e32\uff09\u3002 >>> greet = ' Hello Bob ' >>> greet.lstrip() 'Hello Bob ' >>> greet.rstrip() ' Hello Bob' \u5b57\u7b26\u4e32\u5b57\u5178 \u5b57\u7b26\u4e32\u5185\u5efa\u51fd\u6570\u5e93 Library \u3002 >>> stuff = 'Hello world' >>> type(stuff) <class 'str'> >>> dir(stuff) ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']","title":"\u7b2c\u516d\u7ae0\uff1a\u5b57\u7b26\u4e32"},{"location":"02-Structure/Chapter-6-Strings/#_1","text":"string \u53ef\u7531\u5355\u53cc\u5f15\u53f7\u521b\u5efa\uff0c '' \u6216 \"\" \u3002 str1 = 'Hello' str2 = \"World\"","title":"\u521b\u5efa"},{"location":"02-Structure/Chapter-6-Strings/#_2","text":"\u4f7f\u7528 + \u6765\b\u8fde\u63a52\u4e2a\u5b57\u7b26\u4e32\u3002 >>> str1 = 'Hello' >>> str2 = \"World\" >>> str1+str2 'HelloWorld'","title":"\u5b57\u7b26\u4e32\u8fde\u63a5"},{"location":"02-Structure/Chapter-6-Strings/#_3","text":"\u901a\u8fc7 int() \u5c06 string \u8f6c\u6362\u4e3a int \u7c7b\u3002 >>> str3 = '123' >>> type(str3) <class 'str'> >>> num = int(str3) >>> type(num) <class 'int'> Tip int() \u5e38\u4e8e input() \u8fde\u7528\u3002 >>> num = int(input('number = ')) number = 123 >>> type(num) <class 'int'> Example output = input + 1 output = input + 1 >>> x = input(\"number = \") + 1 number = 123 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: can only concatenate str (not \"int\") to str >>> x = input(\"number = \") number = 123 >>> x = int(x) + 1 >>> x 124","title":"\u5b57\u7b26\u4e32\u8f6c\u6362"},{"location":"02-Structure/Chapter-6-Strings/#_4","text":"","title":"\u5b57\u7b26\u4e32\u9009\u62e9"},{"location":"02-Structure/Chapter-6-Strings/#_5","text":"\u901a\u8fc7\u7d22\u5f15 index \u548c\u65b9\u62ec\u53f7 [ ] \u6765\u67e5\u770b\u5b57\u7b26\u4e32\u5185\u90e8\u6570\u636e\u3002 Warning \u5982\u679c\u7d22\u5f15 index \u8d85\u51fa\u5b57\u7b26\u4e32\u957f\u5ea6\uff0c\u5c06\u4f1a\u5bfc\u81f4\u9519\u8bef\u3002 >>> fruit = 'banana' >>> fruit[10] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> IndexError: string index out of range","title":"\u9009\u62e9"},{"location":"02-Structure/Chapter-6-Strings/#_6","text":">>> s = 'Monty Python' >>> print(s[0:4]) Mont \u5207\u7247\u4f4d\u7f6e\u5230\u7b2c\u4e8c\u4e2a\u6570\u4e4b\u524d\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e8c\u4e2a\u6570\u3002 >>> print(s[6:7]) P \u5982\u679c\u7d22\u5f15\u8d85\u51fa\u8303\u56f4\uff0c\u5207\u7247\u4f1a\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u7ed3\u675f\u3002 >>> print(s[6:20]) Python \u5de6\u3001\u53f3\u7f3a\u7701\u5c06\u88ab\u5206\u522b\u89c6\u4f5c\u4ece\u5934\u5f00\u59cb\u548c\u5230\u672b\u5c3e\u7ed3\u675f\u3002 >>> s = 'Monty Python' >>> print(s[:2]) Mo >>> print(s[8:]) thon >>> print(s[:]) Monty Python","title":"\u5207\u7247"},{"location":"02-Structure/Chapter-6-Strings/#_7","text":"\u5185\u5efa\u51fd\u6570 len() \u53ef\u7528\u6765\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u3002 >>> fruit = 'banana' >>> print(len(fruit)) 6","title":"\u5b57\u7b26\u4e32\u957f\u5ea6"},{"location":"02-Structure/Chapter-6-Strings/#_8","text":">>> fruit = 'banana' >>> 'n' in fruit True >>> 'm' in fruit False >>> 'nan' in fruit True >>> if 'a' in fruit : ... print('Found it!') ... Found it!","title":"\u903b\u8f91\u5224\u65ad"},{"location":"02-Structure/Chapter-6-Strings/#_9","text":"if word == 'banana': print('All right, bananas.') if word < 'banana': print('Your word,' + word + ', comes before banana.') elif word > 'banana': print('Your word,' + word + ', comes after banana.') else: print('All right, bananas.')","title":"\u6bd4\u8f83"},{"location":"02-Structure/Chapter-6-Strings/#_10","text":"\u6211\u4eec\u901a\u8fc7 find() \b\u6765\u5bfb\u627e\u5b57\u7b26\u4e32\u4e2d\u7684\u5b50\u5b57\u7b26\u4e32\u3002 find() \u5bfb\u627e\u5b50\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002 >>> fruit = 'banana' >>> pos = fruit.find('na') >>> print(pos) 2 \u5982\u679c\u5b50\u5b57\u7b26\u4e32\u672a\u88ab\u627e\u5230\uff0c\u5219 find() \u8fd4\u56de -1 \u3002 >>> aa = fruit.find('z') >>> print(aa) -1","title":"\u5b57\u7b26\u67e5\u627e"},{"location":"02-Structure/Chapter-6-Strings/#_11","text":"strip() \u540c\u65f6\u62b9\u6389\u5f00\u5934\u548c\b\u7ed3\u5c3e\u7684\u7a7a\u683c\uff08\u5b50\u5b57\u7b26\u4e32\uff09\u3002 >>> greet = ' Hello Bob ' >>> greet.strip() 'Hello Bob' lstrip() \u548c rstrip() \u5206\u522b\u62b9\u6389\b\u5f00\u5934\u548c\u7ed3\u5c3e\u7684\u7a7a\u683c\uff08\u5b50\u5b57\u7b26\u4e32\uff09\u3002 >>> greet = ' Hello Bob ' >>> greet.lstrip() 'Hello Bob ' >>> greet.rstrip() ' Hello Bob'","title":"\u62b9\u6389\u7a7a\u683c"},{"location":"02-Structure/Chapter-6-Strings/#_12","text":"\u5b57\u7b26\u4e32\u5185\u5efa\u51fd\u6570\u5e93 Library \u3002 >>> stuff = 'Hello world' >>> type(stuff) <class 'str'> >>> dir(stuff) ['capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']","title":"\u5b57\u7b26\u4e32\u5b57\u5178"},{"location":"02-Structure/Chapter-7-Files/","text":"\u521b\u5efa \u53e5\u67c4 handle \u7531\u51fd\u6570 open() \u521b\u5efa\u3002 handle = open(filename, mode) \u6a21\u5f0f \u63cf\u8ff0 r\uff08\u9ed8\u8ba4\uff09 \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934 w \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 Example: fhand = open('mbox.txt') \u53e5\u67c4 handle : <_io.TextIOWrapper name='mbox.txt' mode='r' encoding='UTF-8'> \b\u793a\u4f8b\u6587\u4ef6 this.txt : The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ... \u8ba1\u7b97\u673a\u4e2d\uff0c\u6587\u672c\u6587\u4ef6\u7684\u6bcf\u884c\u672b\u5c3e\u90fd\u6709\u6362\u884c\u7b26\uff08newline\uff09 \\n \u3002 The Zen of Python, by Tim Peters\\n \\n Beautiful is better than ugly.\\n Explicit is better than implicit.\\n Simple is better than complex.\\n Complex is better than complicated.\\n ... \u5e8f\u5217\u8bfb\u53d6 \u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u5171\u540c\u6784\u6210 \u5e8f\u5217 \u3002 * \u6709\u591a\u5c11\u884c\uff0c\u5c31\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32 * \u5e8f\u5217\u5b58\u5728\u5148\u540e\u987a\u5e8f xfile = open('this.txt') for cheese in xfile: print(cheese) \u6ce8\uff1a \u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\b\u662f\u6362\u884c\u7b26 \\n \uff0c\u540c\u65f6 print() \u4e5f\u4f1a\u81ea\u52a8\u6362\u884c\uff0c\u56e0\u6b64\u6253\u5370\u51fa\u6765\u7684\b\b\u5b57\u7b26\u4e32\u4e4b\u95f4\u4f1a\u7a7a\u4e00\u884c\u3002 The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ... \u6574\u4e2a\u6587\u4ef6\u8bfb\u53d6 \u5c06\u6574\u4e2a\u6587\u4ef6\u8bfb\u5165 \u4e00\u4e2a\u5b57\u7b26\u4e32 \u3002 fhand = open('this.txt') inp = fhand.read() print(inp) The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ... \u6269\u5c55 \b open() \u4e4b\u540e\u9700\u8981 close() : fhand = open('this.txt') fhand.close() \u4f46\u5e38\u4e8e with \u8fde\u7528\uff0c\u53ef\u4e0d\u7528\u8fdb\u884c close() \u64cd\u4f5c\u3002 with open('this.txt') as fhand: print(fhand.read()) \u7ec3\u4e60 \u8bfb\u53d6 this.txt \u7684\u524d5\u884c\u3002 with open('this.txt') as fhand: inp = fhand.read().split('\\n') for i in inp[:5]: print(i) The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex.","title":"\u7b2c\u4e03\u7ae0\uff1a\u6587\u4ef6"},{"location":"02-Structure/Chapter-7-Files/#_1","text":"\u53e5\u67c4 handle \u7531\u51fd\u6570 open() \u521b\u5efa\u3002 handle = open(filename, mode) \u6a21\u5f0f \u63cf\u8ff0 r\uff08\u9ed8\u8ba4\uff09 \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934 w \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\uff0c\u5e76\u4ece\u5f00\u5934\u5f00\u59cb\u7f16\u8f91\uff0c\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 Example: fhand = open('mbox.txt') \u53e5\u67c4 handle : <_io.TextIOWrapper name='mbox.txt' mode='r' encoding='UTF-8'> \b\u793a\u4f8b\u6587\u4ef6 this.txt : The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ... \u8ba1\u7b97\u673a\u4e2d\uff0c\u6587\u672c\u6587\u4ef6\u7684\u6bcf\u884c\u672b\u5c3e\u90fd\u6709\u6362\u884c\u7b26\uff08newline\uff09 \\n \u3002 The Zen of Python, by Tim Peters\\n \\n Beautiful is better than ugly.\\n Explicit is better than implicit.\\n Simple is better than complex.\\n Complex is better than complicated.\\n ...","title":"\u521b\u5efa"},{"location":"02-Structure/Chapter-7-Files/#_2","text":"\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u884c\u90fd\u662f\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u5b57\u7b26\u4e32\u5171\u540c\u6784\u6210 \u5e8f\u5217 \u3002 * \u6709\u591a\u5c11\u884c\uff0c\u5c31\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32 * \u5e8f\u5217\u5b58\u5728\u5148\u540e\u987a\u5e8f xfile = open('this.txt') for cheese in xfile: print(cheese) \u6ce8\uff1a \u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\b\u662f\u6362\u884c\u7b26 \\n \uff0c\u540c\u65f6 print() \u4e5f\u4f1a\u81ea\u52a8\u6362\u884c\uff0c\u56e0\u6b64\u6253\u5370\u51fa\u6765\u7684\b\b\u5b57\u7b26\u4e32\u4e4b\u95f4\u4f1a\u7a7a\u4e00\u884c\u3002 The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ...","title":"\u5e8f\u5217\u8bfb\u53d6"},{"location":"02-Structure/Chapter-7-Files/#_3","text":"\u5c06\u6574\u4e2a\u6587\u4ef6\u8bfb\u5165 \u4e00\u4e2a\u5b57\u7b26\u4e32 \u3002 fhand = open('this.txt') inp = fhand.read() print(inp) The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. ...","title":"\u6574\u4e2a\u6587\u4ef6\u8bfb\u53d6"},{"location":"02-Structure/Chapter-7-Files/#_4","text":"\b open() \u4e4b\u540e\u9700\u8981 close() : fhand = open('this.txt') fhand.close() \u4f46\u5e38\u4e8e with \u8fde\u7528\uff0c\u53ef\u4e0d\u7528\u8fdb\u884c close() \u64cd\u4f5c\u3002 with open('this.txt') as fhand: print(fhand.read())","title":"\u6269\u5c55"},{"location":"02-Structure/Chapter-7-Files/#_5","text":"\u8bfb\u53d6 this.txt \u7684\u524d5\u884c\u3002 with open('this.txt') as fhand: inp = fhand.read().split('\\n') for i in inp[:5]: print(i) The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex.","title":"\u7ec3\u4e60"},{"location":"02-Structure/Chapter-8-Lists/","text":"\u521b\u5efa \u5217\u8868\u7528\u4e8e\u5b58\u50a8\u548c\u4fee\u6539\u6570\u636e\uff0c\u5e76\u901a\u8fc7 [ ] \u6765\u521b\u5efa\u3002 L = [1, 24, 76] * \u5217\u8868\u4e2d\u53ef\u5f55\u5165\u4efb\u4f55python\u6570\u636e\u7c7b\u578b L_1 = [1, 24, 76] L_2 = ['red', 'yellow', 'blue'] \u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a L_3 = [] \u6216\u8005 L_3 = list() \u5217\u8868\u5185\u5bb9\u6709\u5e8f L = [1, 24, 76] \u6570\u636e\u9009\u62e9 \u5217\u8868\u548c\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u901a\u8fc7\u7d22\u5f15 index \u8fdb\u884c\u9009\u53d6\u3002 friends = [ 'Joseph', 'Glenn', 'Sally' ] print(friends[1]) Glenn \u4e0e string \u76f8\u6bd4\uff0c string \u5185\u90e8\u6570\u636e\u4e0d\u80fd\u6539\u53d8\uff0c\u800c list \u53ef\u4ee5\u6539\u53d8\u5185\u90e8\u6570\u636e \u4fee\u6539 string \u6570\u636e fruit = 'Banana' fruit[0] = 'b' --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-2-2bc78b004470> in <module> 1 fruit = 'Banana' ----> 2 fruit[0] = 'b' TypeError: 'str' object does not support item assignment \u4fee\u6539 list \u6570\u636e lotto = [2, 14, 26, 41, 63] print(lotto) lotto[2] = 28 print(lotto) [2, 14, 26, 41, 63] [2, 14, 28, 41, 63] \u8fde\u63a5 \u4f7f\u7528 + \u6765\b\u8fde\u63a52\u4e2a\u5217\u8868\u3002 a = [1, 2, 3] b = [4, 5, 6] c = a + b print(c) [1, 2, 3, 4, 5, 6] \u957f\u5ea6 \u5185\u5efa\u51fd\u6570 len() \u53ef\u7528\u6765\u8ba1\u7b97\u5217\u8868\u957f\u5ea6\u3002 x = [ 1, 2, 'joe', 99] print(len(x)) 4 \u5207\u7247 \u4e0e string \u76f8\u540c t = [9, 41, 12, 3, 74, 15] t[1:3] [41, 12] \u6ce8\uff1a \u5207\u7247\u4f4d\u7f6e\u5230\u7b2c\u4e8c\u4e2a\u6570\u4e4b\u524d\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e8c\u4e2a\u6570\u3002 t = [9, 41, 12, 3, 74, 15] t[:4] [9, 41, 12, 3] \u903b\u8f91 some = [1, 9, 21, 10, 16] 9 in some True 15 in some False 20 not in some True \u6392\u5e8f \u5217\u8868\u5185\u90e8\u6570\u636e\u6709\u5e8f\uff0c\b\u4e14\u53ef\u4ee5\u6392\u5e8f\u3002 friends = [ 'Joseph', 'Glenn', 'Sally' ] friends.sort() print(friends) ['Glenn', 'Joseph', 'Sally'] \u5e38\u7528\u5185\u5efa\u51fd\u6570 len() : nums = [3, 41, 12, 9, 74, 15] print(len(nums)) 6 max() : print(max(nums)) 74 min() : print(min(nums)) 3 sum() : print(sum(nums)) 154 \u5b57\u5178 \u5217\u8868\u5185\u5efa\u51fd\u6570\u5e93 Library \u3002 x = list() type(x) list dir(x) ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] \u9644\u52a0 \u5217\u8868\u4e0e\u5b57\u7b26\u4e32 split \u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u51e0\u90e8\u5206\u5e76\u751f\u6210\u5b57\u7b26\u4e32\u5217\u8868\u3002 abc = 'With three words' abc.split() ['With', 'three', 'words']","title":"\u7b2c\u516b\u7ae0\uff1a\u5217\u8868"},{"location":"02-Structure/Chapter-8-Lists/#_1","text":"\u5217\u8868\u7528\u4e8e\u5b58\u50a8\u548c\u4fee\u6539\u6570\u636e\uff0c\u5e76\u901a\u8fc7 [ ] \u6765\u521b\u5efa\u3002 L = [1, 24, 76] * \u5217\u8868\u4e2d\u53ef\u5f55\u5165\u4efb\u4f55python\u6570\u636e\u7c7b\u578b L_1 = [1, 24, 76] L_2 = ['red', 'yellow', 'blue'] \u5217\u8868\u53ef\u4ee5\u4e3a\u7a7a L_3 = [] \u6216\u8005 L_3 = list() \u5217\u8868\u5185\u5bb9\u6709\u5e8f L = [1, 24, 76]","title":"\u521b\u5efa"},{"location":"02-Structure/Chapter-8-Lists/#_2","text":"\u5217\u8868\u548c\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u901a\u8fc7\u7d22\u5f15 index \u8fdb\u884c\u9009\u53d6\u3002 friends = [ 'Joseph', 'Glenn', 'Sally' ] print(friends[1]) Glenn \u4e0e string \u76f8\u6bd4\uff0c string \u5185\u90e8\u6570\u636e\u4e0d\u80fd\u6539\u53d8\uff0c\u800c list \u53ef\u4ee5\u6539\u53d8\u5185\u90e8\u6570\u636e \u4fee\u6539 string \u6570\u636e fruit = 'Banana' fruit[0] = 'b' --------------------------------------------------------------------------- TypeError Traceback (most recent call last) <ipython-input-2-2bc78b004470> in <module> 1 fruit = 'Banana' ----> 2 fruit[0] = 'b' TypeError: 'str' object does not support item assignment \u4fee\u6539 list \u6570\u636e lotto = [2, 14, 26, 41, 63] print(lotto) lotto[2] = 28 print(lotto) [2, 14, 26, 41, 63] [2, 14, 28, 41, 63]","title":"\u6570\u636e\u9009\u62e9"},{"location":"02-Structure/Chapter-8-Lists/#_3","text":"\u4f7f\u7528 + \u6765\b\u8fde\u63a52\u4e2a\u5217\u8868\u3002 a = [1, 2, 3] b = [4, 5, 6] c = a + b print(c) [1, 2, 3, 4, 5, 6]","title":"\u8fde\u63a5"},{"location":"02-Structure/Chapter-8-Lists/#_4","text":"\u5185\u5efa\u51fd\u6570 len() \u53ef\u7528\u6765\u8ba1\u7b97\u5217\u8868\u957f\u5ea6\u3002 x = [ 1, 2, 'joe', 99] print(len(x)) 4","title":"\u957f\u5ea6"},{"location":"02-Structure/Chapter-8-Lists/#_5","text":"\u4e0e string \u76f8\u540c t = [9, 41, 12, 3, 74, 15] t[1:3] [41, 12] \u6ce8\uff1a \u5207\u7247\u4f4d\u7f6e\u5230\u7b2c\u4e8c\u4e2a\u6570\u4e4b\u524d\uff0c\u4e0d\u5305\u62ec\u7b2c\u4e8c\u4e2a\u6570\u3002 t = [9, 41, 12, 3, 74, 15] t[:4] [9, 41, 12, 3]","title":"\u5207\u7247"},{"location":"02-Structure/Chapter-8-Lists/#_6","text":"some = [1, 9, 21, 10, 16] 9 in some True 15 in some False 20 not in some True","title":"\u903b\u8f91"},{"location":"02-Structure/Chapter-8-Lists/#_7","text":"\u5217\u8868\u5185\u90e8\u6570\u636e\u6709\u5e8f\uff0c\b\u4e14\u53ef\u4ee5\u6392\u5e8f\u3002 friends = [ 'Joseph', 'Glenn', 'Sally' ] friends.sort() print(friends) ['Glenn', 'Joseph', 'Sally']","title":"\u6392\u5e8f"},{"location":"02-Structure/Chapter-8-Lists/#_8","text":"len() : nums = [3, 41, 12, 9, 74, 15] print(len(nums)) 6 max() : print(max(nums)) 74 min() : print(min(nums)) 3 sum() : print(sum(nums)) 154","title":"\u5e38\u7528\u5185\u5efa\u51fd\u6570"},{"location":"02-Structure/Chapter-8-Lists/#_9","text":"\u5217\u8868\u5185\u5efa\u51fd\u6570\u5e93 Library \u3002 x = list() type(x) list dir(x) ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']","title":"\u5b57\u5178"},{"location":"02-Structure/Chapter-8-Lists/#_10","text":"","title":"\u9644\u52a0"},{"location":"02-Structure/Chapter-8-Lists/#_11","text":"split \u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u51e0\u90e8\u5206\u5e76\u751f\u6210\u5b57\u7b26\u4e32\u5217\u8868\u3002 abc = 'With three words' abc.split() ['With', 'three', 'words']","title":"\u5217\u8868\u4e0e\u5b57\u7b26\u4e32"},{"location":"02-Structure/Chapter-9-Dictionaries/","text":"\u521b\u5efa \u5b57\u5178\u7528\u4e8e\u5b58\u50a8\u548c\u4fee\u6539\u6570\u636e\uff0c\u5e76\u901a\u8fc7 { } \u6765\u521b\u5efa\uff0c\u4e0e list \u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u518d\u50cf list \u4e00\u6837\u4f7f\u7528 index \u6765\u8bbf\u95ee\u5185\u90e8\u5143\u7d20\uff0c\u800c\u4f7f\u7528 Key \u6765\u7ed9\u6bcf\u4e2a\u6570\u636e\u6253\u4e0a\u6807\u7b7e\uff0c\u56e0\u6b64\b dict \u9700\u8981\u540c\u65f6\u5b58\u50a81\u5bf9\u503c\uff0c Key \u548c Value \uff0c\u540c\u65f6 Key \u5fc5\u987b\u662f string \u7c7b\u578b\u3002 D = {Key: Value} D = {'money': 12, 'tissues': 75, 'candy': 3} \u7a7a\u5b57\u5178\u53ef\u4ee5\u901a\u8fc7 [ ] \u6765\u6dfb\u52a0\u6570\u636e\u3002 D = dict() \bD['money'] = 12 D['tissues'] = 75 D['candy'] = 3 * \u5217\u8868\u4e2d\u53ef\u5f55\u5165\u4efb\u4f55python\u6570\u636e\u7c7b\u578b >>> L_1 = [1, 24, 76] >>> L_2 = [3, 75, 12] >>> D_1 = {'list_1': L_1,'list_2': L_2} >>> D_1 {'list_1': [1, 24, 76], 'list_2': [3, 75, 12]} >>> D_2 = {'list_1': L_1,'dict_1': D_1} >>> D_2 {'list_1': [1, 24, 76], 'dict_1': {'list_1': [1, 24, 76], 'list_2': [3, 75, 12]}} \u5b57\u5178\u53ef\u4ee5\u4e3a\u7a7a D_3 = {} \u6216\u8005 D_3 = dict() \u5b57\u5178\u5185\u5bb9\u65e0\u5e8f >>> D_4 = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> print(D_4) {'jan': 100, 'chuck': 1, 'fred': 42} \u6570\u636e\u9009\u62e9 \u901a\u8fc7\u7d22\u5f15 Key \u8fdb\u884c\u9009\u53d6\u3002 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> print(D['tissues']) 75 Python\u65b0\u65e7 Python\u66f4\u65b03.4\u540e\uff0c keys() \u4e0d\u518d\u8fd4\u56de list \u7c7b\u578b\uff0c\u800c\u662f\b\u4f7f\u7528\u4e00\u79cd\u53ef\u8fed\u4ee3\u7c7b\u578b dict_keys >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> D.keys() dict_keys(['money', 'tissues', 'candy']) \u8be5\u6548\u679c\u540c\u6837\u4f5c\u7528\u4e8e values() \u548c items() \u3002 \u51fd\u6570 \u8fd4\u56de\u7c7b\u578b \u793a\u4f8b .keys() dict_keys dict_keys(['money', 'tissues', 'candy']) .valuse() dict_values dict_values([12, 75, 3]) .items() dict_items dict_items([('money', 12), ('tissues', 75), ('candy', 3)]) \u83b7\u53d6 Key >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.keys()) ['money', 'tissues', 'candy'] \u6216\u8005 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D) ['money', 'tissues', 'candy'] \u83b7\u53d6 Value >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.values()) [12, 75, 3] \u83b7\u53d6\u4e00\u5bf9\u6570\u636e items >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.items()) [('money', 12), ('tissues', 75), ('candy', 3)] Example: >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> for k, v in D.items(): ... print(k,v) ... money 12 tissues 75 candy 3 \u903b\u8f91 in \u7684\u67e5\u627e\u529f\u80fd\u5728\u5b57\u5178\u4e2d\u4f5c\u7528\u4e8e Key \u3002 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> 'tissues' in D True >>> 75 in D False Example: \u5faa\u73af\u4e2d\u7684 key \u4ece\u5b57\u5178\u7684 Key \u4e2d\u53d6\u503c\u3002 >>> counts = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> for key in counts: ... print(key, counts[key]) ... chuck 1 fred 42 jan 100 \u8ba1\u6570 \b\u5b57\u5178\u5e38\u7528\u6765\u8ba1\u6570\u3002 \u901a\u5e38 \u8ba1\u6570\uff1a counts = dict() names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] for name in names : if name not in counts: counts[name] = 1 else : counts[name] = counts[name] + 1 print(counts) {'csev': 2, 'cwen': 2, 'zqian': 1} \u5b57\u5178\u5185\u7f6e\u51fd\u6570 get() \u51fd\u6570\u8bf4\u660e\uff1a get() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6 Value \uff0c\u4e0d\u4f1a\u629b\u51fa error \u3002 D.get(Key, DefaultValue) \uff1a\u5982\u679c\u5728\u5b57\u5178 D \u4e2d\u5b58\u5728 Key \uff0c\u5219 pass \uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u521d\u503c DefaultValue \u3002 >>> D = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> D.get('fred',0) 42 >>> D.get('frd',13) 13 \u8ba1\u6570\uff1a counts = dict() names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] for name in names : counts[name] = counts.get(name, 0) + 1 print(counts) {'csev': 2, 'cwen': 2, 'zqian': 1} \u627e\u51fa\u6700\u5927\u503c bigcount = None bigword = None for word,count in counts.items(): if bigcount is None or count > bigcount: bigword = word bigcount = count print(bigword,bigcount)","title":"\u7b2c\u4e5d\u7ae0\uff1a\u5b57\u5178"},{"location":"02-Structure/Chapter-9-Dictionaries/#_1","text":"\u5b57\u5178\u7528\u4e8e\u5b58\u50a8\u548c\u4fee\u6539\u6570\u636e\uff0c\u5e76\u901a\u8fc7 { } \u6765\u521b\u5efa\uff0c\u4e0e list \u4e0d\u540c\uff0c\u6211\u4eec\u4e0d\u518d\u50cf list \u4e00\u6837\u4f7f\u7528 index \u6765\u8bbf\u95ee\u5185\u90e8\u5143\u7d20\uff0c\u800c\u4f7f\u7528 Key \u6765\u7ed9\u6bcf\u4e2a\u6570\u636e\u6253\u4e0a\u6807\u7b7e\uff0c\u56e0\u6b64\b dict \u9700\u8981\u540c\u65f6\u5b58\u50a81\u5bf9\u503c\uff0c Key \u548c Value \uff0c\u540c\u65f6 Key \u5fc5\u987b\u662f string \u7c7b\u578b\u3002 D = {Key: Value} D = {'money': 12, 'tissues': 75, 'candy': 3} \u7a7a\u5b57\u5178\u53ef\u4ee5\u901a\u8fc7 [ ] \u6765\u6dfb\u52a0\u6570\u636e\u3002 D = dict() \bD['money'] = 12 D['tissues'] = 75 D['candy'] = 3 * \u5217\u8868\u4e2d\u53ef\u5f55\u5165\u4efb\u4f55python\u6570\u636e\u7c7b\u578b >>> L_1 = [1, 24, 76] >>> L_2 = [3, 75, 12] >>> D_1 = {'list_1': L_1,'list_2': L_2} >>> D_1 {'list_1': [1, 24, 76], 'list_2': [3, 75, 12]} >>> D_2 = {'list_1': L_1,'dict_1': D_1} >>> D_2 {'list_1': [1, 24, 76], 'dict_1': {'list_1': [1, 24, 76], 'list_2': [3, 75, 12]}} \u5b57\u5178\u53ef\u4ee5\u4e3a\u7a7a D_3 = {} \u6216\u8005 D_3 = dict() \u5b57\u5178\u5185\u5bb9\u65e0\u5e8f >>> D_4 = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> print(D_4) {'jan': 100, 'chuck': 1, 'fred': 42}","title":"\u521b\u5efa"},{"location":"02-Structure/Chapter-9-Dictionaries/#_2","text":"\u901a\u8fc7\u7d22\u5f15 Key \u8fdb\u884c\u9009\u53d6\u3002 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> print(D['tissues']) 75","title":"\u6570\u636e\u9009\u62e9"},{"location":"02-Structure/Chapter-9-Dictionaries/#python","text":"Python\u66f4\u65b03.4\u540e\uff0c keys() \u4e0d\u518d\u8fd4\u56de list \u7c7b\u578b\uff0c\u800c\u662f\b\u4f7f\u7528\u4e00\u79cd\u53ef\u8fed\u4ee3\u7c7b\u578b dict_keys >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> D.keys() dict_keys(['money', 'tissues', 'candy']) \u8be5\u6548\u679c\u540c\u6837\u4f5c\u7528\u4e8e values() \u548c items() \u3002 \u51fd\u6570 \u8fd4\u56de\u7c7b\u578b \u793a\u4f8b .keys() dict_keys dict_keys(['money', 'tissues', 'candy']) .valuse() dict_values dict_values([12, 75, 3]) .items() dict_items dict_items([('money', 12), ('tissues', 75), ('candy', 3)])","title":"Python\u65b0\u65e7"},{"location":"02-Structure/Chapter-9-Dictionaries/#key","text":">>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.keys()) ['money', 'tissues', 'candy'] \u6216\u8005 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D) ['money', 'tissues', 'candy']","title":"\u83b7\u53d6 Key"},{"location":"02-Structure/Chapter-9-Dictionaries/#value","text":">>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.values()) [12, 75, 3]","title":"\u83b7\u53d6 Value"},{"location":"02-Structure/Chapter-9-Dictionaries/#items","text":">>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> list(D.items()) [('money', 12), ('tissues', 75), ('candy', 3)] Example: >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> for k, v in D.items(): ... print(k,v) ... money 12 tissues 75 candy 3","title":"\u83b7\u53d6\u4e00\u5bf9\u6570\u636e items"},{"location":"02-Structure/Chapter-9-Dictionaries/#_3","text":"in \u7684\u67e5\u627e\u529f\u80fd\u5728\u5b57\u5178\u4e2d\u4f5c\u7528\u4e8e Key \u3002 >>> D = {'money': 12, 'tissues': 75, 'candy': 3} >>> 'tissues' in D True >>> 75 in D False Example: \u5faa\u73af\u4e2d\u7684 key \u4ece\u5b57\u5178\u7684 Key \u4e2d\u53d6\u503c\u3002 >>> counts = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> for key in counts: ... print(key, counts[key]) ... chuck 1 fred 42 jan 100","title":"\u903b\u8f91"},{"location":"02-Structure/Chapter-9-Dictionaries/#_4","text":"\b\u5b57\u5178\u5e38\u7528\u6765\u8ba1\u6570\u3002","title":"\u8ba1\u6570"},{"location":"02-Structure/Chapter-9-Dictionaries/#_5","text":"\u8ba1\u6570\uff1a counts = dict() names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] for name in names : if name not in counts: counts[name] = 1 else : counts[name] = counts[name] + 1 print(counts) {'csev': 2, 'cwen': 2, 'zqian': 1}","title":"\u901a\u5e38"},{"location":"02-Structure/Chapter-9-Dictionaries/#get","text":"\u51fd\u6570\u8bf4\u660e\uff1a get() \u51fd\u6570\u7528\u4e8e\u83b7\u53d6 Value \uff0c\u4e0d\u4f1a\u629b\u51fa error \u3002 D.get(Key, DefaultValue) \uff1a\u5982\u679c\u5728\u5b57\u5178 D \u4e2d\u5b58\u5728 Key \uff0c\u5219 pass \uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u521d\u503c DefaultValue \u3002 >>> D = { 'chuck' : 1 , 'fred' : 42, 'jan': 100} >>> D.get('fred',0) 42 >>> D.get('frd',13) 13 \u8ba1\u6570\uff1a counts = dict() names = ['csev', 'cwen', 'csev', 'zqian', 'cwen'] for name in names : counts[name] = counts.get(name, 0) + 1 print(counts) {'csev': 2, 'cwen': 2, 'zqian': 1}","title":"\u5b57\u5178\u5185\u7f6e\u51fd\u6570get()"},{"location":"02-Structure/Chapter-9-Dictionaries/#_6","text":"bigcount = None bigword = None for word,count in counts.items(): if bigcount is None or count > bigcount: bigword = word bigcount = count print(bigword,bigcount)","title":"\u627e\u51fa\u6700\u5927\u503c"}]}